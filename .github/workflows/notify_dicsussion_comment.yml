name: Notify Slack on Discussion Comment

on:
  discussion_comment:
    types: [created]
    
jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'  # 最新のLTSバージョンを使用

    - name: Install dependencies
      run: |
        npm init -y
        npm install marked

    - name: Create Convert Script File
      run: |
        echo 'const marked = require("marked");

        function markdownToHtml(markdown) {
          return marked.parse(markdown);
        }

        function htmlToMrkdwn(html) {
          return html
            .replace(/<strong>(.*?)<\/strong>/g, "*$1*")
            .replace(/<em>(.*?)<\/em>/g, "_$1_")
            .replace(/<code>(.*?)<\/code>/g, "`$1`")
            .replace(/<pre><code>(.*?)<\/code><\/pre>/g, "```\n$1\n```")
            .replace(/<a href=\\"(.*?)\\">(.*?)<\/a>/g, "<$1|$2>")
            .replace(/<h1>(.*?)<\/h1>/g, "*$1*\n")
            .replace(/<h2>(.*?)<\/h2>/g, "*$1*\n")
            .replace(/<h3>(.*?)<\/h3>/g, "*$1*\n")
            .replace(/<ul>(.*?)<\/ul>/gs, (match, p1) => p1.replace(/<li>(.*?)<\/li>/g, "• $1\n"))
            .replace(/<ol>(.*?)<\/ol>/gs, (match, p1) => p1.replace(/<li>(.*?)<\/li>/g, "1. $1\n"))
            .replace(/<p>(.*?)<\/p>/g, "$1\n")
            .replace(/<br>/g, "\n")
            .replace(/<\/?[^>]+(>|$)/g, "");
        }

        function markdownToMrkdwn(markdown) {
          const html = markdownToHtml(markdown);
          return htmlToMrkdwn(html);

        }

        const markdownText = process.argv[2];

        console.log("commentBody=" + escape(String(markdownToMrkdwn(markdownText))));' > convert.js

    - name: Convert Markdown to mrkdwn
      id: convert
      run: |
          node convert.js "${{ github.event.comment.body }}" >> $GITHUB_ENV



    - name: Determine Slack Webhook URL
      id: determine_url
      run: |
        CATEGORY_NAME="${{ github.event.discussion.category.name }}"
        WEBHOOK_URLS=()
        if [[ "$CATEGORY_NAME" == *"FE"* ]]; then
          WEBHOOK_URLS+=("${{ secrets.SLACK_WEBHOOK_URL_FE }}")
        fi
        if [[ "$CATEGORY_NAME" == *"BE"* ]]; then
          WEBHOOK_URLS+=("${{ secrets.SLACK_WEBHOOK_URL_BE }}")
        fi
        if [[ "$CATEGORY_NAME" == *"FE"* && "$CATEGORY_NAME" == *"BE"* ]]; then
          WEBHOOK_URLS+=("${{ secrets.SLACK_WEBHOOK_URL_MAINTAINER }}")
        elif [[ ${#WEBHOOK_URLS[@]} -eq 0 ]]; then
          WEBHOOK_URLS+=("${{ secrets.SLACK_WEBHOOK_URL_MAINTAINER }}")
        fi
        echo "WEBHOOK_URLS=${WEBHOOK_URLS[@]}" >> $GITHUB_ENV
    
    - name: Send notification to Slack
      env:
        SLACK_WEBHOOK_URLS: ${{ env.WEBHOOK_URLS }}
      run: |
        COMMENT_URL="${{ github.event.comment.html_url }}"
        COMMENT_BODY="${{ env.commentBody }}"
        COMMENT_CREATED_AT="${{ github.event.comment.created_at }}"
        DISCUSSION_NUMBER="${{ github.event.discussion.number }}"
        DISCUSSION_TITLE="${{ github.event.discussion.title }}"
        DISCUSSION_URL="${{ github.event.discussion.html_url }}"
        DISCUSSION_CATEGORY="${{ github.event.discussion.category.name }}"
        REPOSITORY_URL="${{ github.event.repository.html_url }}"
        REPOSITORY_NAME="${{ github.event.repository.full_name }}"
        COMMENT_USER="${{ github.event.comment.user.login }}"
        COMMENT_USER_AVATAR="${{ github.event.comment.user.avatar_url }}"
        
        # Convert the created_at timestamp to a Unix timestamp
        COMMENT_TIMESTAMP=$(date -d "$COMMENT_CREATED_AT" +%s)
        
        # Create the JSON payload for Slack
        PAYLOAD=$(jq -n --arg url "$COMMENT_URL" \
                        --arg body "$COMMENT_BODY" \
                        --arg created_at "$COMMENT_CREATED_AT" \
                        --arg discussion_number "$DISCUSSION_NUMBER" \
                        --arg discussion_title "$DISCUSSION_TITLE" \
                        --arg discussion_url "$DISCUSSION_URL" \
                        --arg discussion_category "$DISCUSSION_CATEGORY" \
                        --arg repository_url "$REPOSITORY_URL" \
                        --arg repository_name "$REPOSITORY_NAME" \
                        --arg comment_user "$COMMENT_USER" \
                        --arg comment_user_avatar "$COMMENT_USER_AVATAR" \
                        --arg ts "$COMMENT_TIMESTAMP" '{
          "username": "GitHub Discussions",
          "icon_url": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
          "text": "<\($url)|New comment on #\($discussion_number) \($discussion_title)>",
          "attachments": [
            {
              "fallback": "コメントが追加されました！",
              "author_name": $comment_user,
              "author_icon": $comment_user_avatar,
              "text": $body,
              "footer": "<\($discussion_url)|\($discussion_category) #\($discussion_number)_\($discussion_title)> <\($repository_url)|\($repository_name)>",
              "ts": $ts
            }
          ]
        }')
        
        # Send the payload to each Slack webhook URL
        for WEBHOOK_URL in $WEBHOOK_URLS; do
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $WEBHOOK_URL
        done
