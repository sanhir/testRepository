name: Notify Slack on Discussion Comment

on:
  discussion_comment:
    types: [created]
    
jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
    - name: Convert Markdown to Mrkdwn
      id: convert
      uses: actions/github-script@v7
      with:
        script: |
          // Markdownをmrkdwn形式に変換する関数
          const markdownToMrkdwn = (text) => {
            const codeBlocks = [];
            // コードブロックとインラインコードを一時的に置き換える
            text = text.replace(/(```[\s\S]*?```|`[^`]*`)/g, (match) => {
                codeBlocks.push(match);
                return `\x1A${codeBlocks.length - 1}\x1A`;
            });

            // 見出しを変換
            text = text.replace(/^(#{1,6}) (.*)/gm, (_, p1, p2) => {
                const level = p1.length;
                return `${'*'.repeat(level)}${p2}${'*'.repeat(level)}`;
            });

            // ボールドを変換
            text = text.replace(/\*\*(.*?)\*\*/g, '*$1*');
            // イタリックを変換
            text = text.replace(/\*(.*?)\*/g, '_$1_');
            // リンクを変換
            text = text.replace(/\[(.*?)\]\((.*?)\)/g, '<$2|$1>');
            // 箇条書きリストを変換
            text = text.replace(/^(\s*)-\s+/gm, '$1• ');
            // 番号付きリストを変換
            text = text.replace(/^(\s*)\d+\.\s+/gm, '$1• ');
            // 引用を変換
            text = text.replace(/^>\s+/gm, '> ');
            // 水平線を変換
            text = text.replace(/^---+/gm, '---');
            // コードブロックとインラインコードを元に戻す
            text = text.replace(/\x1A(\d+)\x1A/g, (_, p1) => codeBlocks[parseInt(p1, 10)]);

            return text;
          };

          // コメントの内容を取得
          const commentBody  = "${{ github.event.comment.body }}";

          // コメント内容をmrkdwn形式に変換
          const convertedText = markdownToMrkdwn(commentBody);

          // 変換結果を出力として設定
          core.setOutput('result', convertedText);
          console.log(convertedText);
      
    - name: Determine Slack Webhook URL
      id: determine_url
      run: |
        CATEGORY_NAME="${{ github.event.discussion.category.name }}"
        WEBHOOK_URLS=()
        if [[ "$CATEGORY_NAME" == *"FE"* ]]; then
          WEBHOOK_URLS+=("${{ secrets.SLACK_WEBHOOK_URL_FE }}")
        fi
        if [[ "$CATEGORY_NAME" == *"BE"* ]]; then
          WEBHOOK_URLS+=("${{ secrets.SLACK_WEBHOOK_URL_BE }}")
        fi
        if [[ ${#WEBHOOK_URLS[@]} -eq 0 ]]; then
          WEBHOOK_URLS+=("${{ secrets.SLACK_WEBHOOK_URL_MAINTAINER }}")
        fi
        echo "WEBHOOK_URLS=${WEBHOOK_URLS[@]}" >> $GITHUB_ENV

    - name: Send notification to Slack
      env:
        SLACK_WEBHOOK_URLS: ${{ env.WEBHOOK_URLS }}
      run: |
        COMMENT_URL="${{ github.event.comment.html_url }}"
        COMMENT_BODY="${{ steps.convert.outputs.result }}"
        COMMENT_CREATED_AT="${{ github.event.comment.created_at }}"
        DISCUSSION_NUMBER="${{ github.event.discussion.number }}"
        DISCUSSION_TITLE="${{ github.event.discussion.title }}"
        DISCUSSION_URL="${{ github.event.discussion.html_url }}"
        DISCUSSION_CATEGORY="${{ github.event.discussion.category.name }}"
        REPOSITORY_URL="${{ github.event.repository.html_url }}"
        REPOSITORY_NAME="${{ github.event.repository.full_name }}"
        COMMENT_USER="${{ github.event.comment.user.login }}"
        COMMENT_USER_AVATAR="${{ github.event.comment.user.avatar_url }}"
        
        # Convert the created_at timestamp to a Unix timestamp
        COMMENT_TIMESTAMP=$(date -d "$COMMENT_CREATED_AT" +%s)

        echo "aaa"
        echo "$COMMENT_BODY"
        
        # Create the JSON payload for Slack
        PAYLOAD=$(jq -n --arg url "$COMMENT_URL" \
                        --arg body "$COMMENT_BODY" \
                        --arg created_at "$COMMENT_CREATED_AT" \
                        --arg discussion_number "$DISCUSSION_NUMBER" \
                        --arg discussion_title "$DISCUSSION_TITLE" \
                        --arg discussion_url "$DISCUSSION_URL" \
                        --arg discussion_category "$DISCUSSION_CATEGORY" \
                        --arg repository_url "$REPOSITORY_URL" \
                        --arg repository_name "$REPOSITORY_NAME" \
                        --arg comment_user "$COMMENT_USER" \
                        --arg comment_user_avatar "$COMMENT_USER_AVATAR" \
                        --arg ts "$COMMENT_TIMESTAMP" '{
          "username": "GitHub Discussions",
          "icon_url": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
          "text": "<\($url)|New comment on #\($discussion_number) \($discussion_title)>",
          "attachments": [
            {
              "fallback": "コメントが追加されました！",
              "author_name": $comment_user,
              "author_icon": $comment_user_avatar,
              "text": $body,
              "footer": "<\($discussion_url)|\($discussion_category) #\($discussion_number)_\($discussion_title)> <\($repository_url)|\($repository_name)>",
              "ts": $ts
            }
          ]
        }')
        
        # Send the payload to each Slack webhook URL
        for WEBHOOK_URL in $WEBHOOK_URLS; do
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $WEBHOOK_URL
        done
